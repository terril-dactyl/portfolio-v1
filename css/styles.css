/* Global Styles */
* {
  margin: 0;
  padding: 0;
  list-style-type: none;
  text-decoration: none;
  box-sizing: border-box;
}

*::before,
*::after {
  box-sizing: border-box;
}

:root {
  --violet: #170528;
  --light-violet: #260A3D;
  --lightest-violet: #411665;
  --slate: #8892B0;
  --light-slate: #A8B2D1;
  --lightest-slate: #CCD6F6;
  --white: #FFFFFF;
  --blue: #64DAFF;

  --violet-tint: rgba(23, 5, 40, 0.5);
  --blue-tint: rgba(100, 218, 255, 0.122);
  --blue-tint-alt: rgba(100, 218, 255, 0.75);

  --font-text: 'Work Sans', 'sans-serif';
  --font-head: 'Poppins', 'sans-serif';
  --font-title: 'Poppins', 'sans-serif';
  --font-num: 'Fira Code', 'monospace';

  --fs-sm: 14px;
  --fs-md: 16px;
  --fs-lg: 18px;
  --fs-head: 40px;
  --fs-title: 24px;

  --border-radius: 4px;

  /* 
    --custom-clr: NULL; Logical property
  */
}

body {
  color: var(--custom-color, var(--slate));
  font-family: var(--custom-font, var(--font-text));
  background-color: var(--violet);
}

/* Typography */
svg {
  /* width: 100%;
  height: 100%; */
  fill: currentColor;
  color: var(--blue);
  vertical-align: middle;
}

h1,
h2,
h3 {
  font-family: var(--font-head);
}

p,
li,
a {
  display: inline-block;
  letter-spacing: 0.25px;
  font-family: var(--font-text);
}

/* Utility Classes */
.flex {
  display: flex;
  align-items: var(--align-flex, center);
  gap: var(--gap, 1rem);
}

/*
Terrildactyl's tweaks 1
--------------------------------
I added a class called align-items-stretch to
make the flexed content fill the vertical space
of the container. This makes all the nav buttons
as tall as the Resume button. This will allow us
to have a background image that appears outside
of the anchor's natural box model.

This will also need to be applied to each level
from the nav container down to the list items.

Finally. on the LI level, we need to vertically
center the anchors, since the default is to align
to the top in a flexed container.
*/
.flex-align-stretch {
  align-items: stretch;
}

.flex-align-center {
  align-items: center;
}
/* End tweaks 1 */

.container {
  width: 100%;
  margin: 0 auto;
  border: 2px solid red;
}

.btn {
  padding: 0.75em 1em;
  color: var(--btn-clr, var(--blue));
  border: 1px solid var(--btn-clr, var(--blue));
  border-radius: var(--border-radius);
  font-family: var(--font-custom, var(--font-text));
  font-size: var(--fs-custom, var(--fs-sm));
}

/* ===========
      Navbar
   =========== */
.nav-header {
  display: grid;
  align-items: center;
  background-color: var(--violet-tint);
  width: 100%;
  height: 100px;
  position: fixed;
  z-index: 10;
  overflow: hidden;
}

.navbar {
  position: relative;
  justify-content: space-between;
  margin: 0 clamp(25px, 7.55vw, 50px);
}

.nav-logo {
  flex: 0 0 auto;
}

.nav-logo,
.nav-logo > a,
.nav-logo > a > svg {
  width: 42px;
  height: 42px;
}

#logo {
  fill: none;
  /* transition: all 0.25s cubic-bezier(0.645,0.045,0.355,1); */
}

#logo:hover {
  fill: var(--blue-tint);
  /* transition: all 0.25s cubic-bezier(0.645,0.045,0.355,1); */
}

.ham {
  display: none;
}

.nav-box {
  --gap: 1.5rem;
}

/* Hover effect doing the underline from left-in (on hover) to right-out (off hover) */
/*
.nav-list-item {
  position: relative;
  font-size: var(--fs-sm);
  color: var(--lightest-slate);
  transition: color 300ms ease-in;
}

.nav-list-item::after {
  content: '';
  display: block;
  position: absolute;
  top: calc(100% + 1px); right: 0; bottom: 0; left: 0.5px;
  inset: calc(100% + 1px) 0 0 0.25px;
  width: 100%;
  height: 1px;
  background-color: var(--blue);
  border-radius: var(--border-radius);
  transform: scaleX(0);
  transform-origin: right;
  padding-block: 0.75px;
  transition: transform 300ms ease-out;
}

.nav-list-item:hover {
  color: var(--blue);
}

.nav-list-item:hover::after {
  transform: scaleX(1);
  transform-origin: left;
}
*/

/* Terrildactyl's tweaks 

1. Set up basic colors for default anf :hover states.
2. Figure out how to create a gradient that simulates a 1px underline.
   (Normally, I build everything off the 1rem size, so that all other
   sizes inherit from the root font size. That way if the user cahnges
   the root font size, the UI will scale accordingly.)
   I'm going to do a  four stop gradient: transparent/hover color/hover color/transparent.
   This will give us nice sharp edges, instead of a gradient fade. The real art here will
   be finding the correct locations for the two hover color stops. Should be about
   4 pixels below the baseline of the ancor text.

*/
.nav-list-item {
  background-image: linear-gradient(0deg, rgba(100,218,255,0) 3%, rgba(100,218,255,1) 3%, rgba(100,218,255,1) 8%, rgba(100,218,255,0) 8%);
  background-repeat: no-repeat;
  background-size: 0% 100%;
  color: #CCD6F6;
  padding: .25rem;
  transition: none;
}

.nav-list-item:hover {
  background-size: 100% 100%;
  color: #64DAFF;
  transition: all .25s ease-out;
}



.resume-btn:hover {
  background-color: var(--blue-tint);
  /* background-image: conic-gradient(from 180deg, var(--blue), var(--blue-tint)); */
}

@media screen and (max-width: 768px) {
  .nav-box {
    --gap: 2.5rem;
    position: fixed;
    top: 0; bottom: 0; right: 0;
    width: min(75vw, 400px);
    height: 100vh; /* Fixes the issue of nav-menu notfilling the vertical space completely. It was getting obstructed by the browser's toolbar. Now the nav-box (which contains the nav-menu takes the full horizontal viewport of any given device*/
    justify-content: center;
    border-radius: 10px;
    transform: translateX(100%);
    transition: transform 200ms ease-in;
    background-color: var(--light-violet);
  }

  .nav-box[toggle="true"] {
    transform: translateX(0%);
    transition: transform 200ms ease-out;
  }

  .nav-box,
  .nav-list {
    flex-direction: column;
  }

  .resume-btn {
    --fs-custom: var(--fs-md);
    padding: 1em 2em;
  }

  .nav-list-item {
    position: relative;
    font-size: var(--fs-lg);
    transition: color 0.75s ease-out,
                letter-spacing 300ms ease-out;
  }

  .nav-list-item:hover {
    letter-spacing: 0.25rem;
  }

  .nav-list-item::before,
  .nav-list-item::after {
    content: '';
    display: block;
    position: absolute;
    top: calc(50% + 1px);
    width: 0px;
    height: 1px;
    background-color: var(--blue);
    border-radius: var(--border-radius);
    transition: width 300ms ease-out;
    transform: none;
    padding: 0;
    /* padding-block: 0.05rem; */
  }
  
  .nav-list-item::before {
    right: 100%;
    margin-right: 0.75rem;
  }
  
  .nav-list-item::after {
    left: 100%;
    margin-left: 0.5rem;;
  }

  .nav-list-item:hover::before,
  .nav-list-item:hover::after {
    width: 80px;
    transform: none;
    transform-origin: initial;
  }

  .ham {
    display: block;
    height: 22.5px;
    z-index: 20;
    position: relative;
    cursor: pointer;
  }

  /* Blur all the sections with an id of content or make sure every content is within a div tag with a class or id of content or anything */
  /* section {
    filter: blur(5px) brightness(0.8);
  } */
}

/* ===========
      Front
   =========== */
section {
  opacity: 1;
  justify-content: space-evenly;
  overflow: hidden;
}

.hero {
  max-width: 800px;
  flex-direction: column;
  justify-content: center;
  --align-flex: flex-start;
  min-height: 100vh;
}

.heroo {
  max-width: 800px;
  flex-direction: column;
  min-height: 100vh;
}

.mini-sys {
  fill: none;
  justify-content: center;
  --align-flex: center;
  width: 300px;
  height: 300px;
  margin: auto auto;
}

#Ring {
  stroke: var(--slate);
  stroke-width: 3;
  transition: all 250ms ease-in-out;
}

#Ring:hover {
  stroke: var(--blue);
  stroke-width: 3;
  transition: all 200ms ease-in-out;
}

/* .moon {
  display: inline-block;
  float: left;
  width: 200px;
  height: 200px;
  margin: inherit;
} */